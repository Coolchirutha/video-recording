{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","startCamera","navigator","mediaDevices","getUserMedia","audio","video","then","stream","setState","isCameraOn","document","getElementById","srcObject","startRecording","haveLoadedMetadata","rec","MediaRecorder","audioBitsPerSecond","videoBitsPerSecond","mimeType","recordingObject","videoStream","state","start","stopRecording","getTracks","forEach","track","stop","onstop","e","link","URL","createObjectURL","Blob","recordedChunks","type","blobURL","console","log","src","ondataavailable","data","chunks","push","hasRecorded","isRecording","this","preview","Promise","resolve","onloadedmetadata","className","id","autoPlay","muted","controls","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c13b331c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport axios from 'axios';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisCameraOn: false,\n\t\t\tisRecording: false,\n\t\t\thasRecorded: false,\n\t\t\tblobURL: '',\n\t\t\trecordingObject: {},\n\t\t\trecordedChunks: [],\n\t\t};\n\t}\n\n\tstartCamera = () => {\n\t\tnavigator.mediaDevices\n\t\t\t.getUserMedia({ audio: true, video: true })\n\t\t\t.then((stream) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisCameraOn: true,\n\t\t\t\t});\n\t\t\t\tlet preview = document.getElementById('previewStream');\n\t\t\t\tpreview.srcObject = stream;\n\t\t\t});\n\t};\n\n\thaveLoadedMetadata(stream) {\n\t\tthis.setState({\n\t\t\tisCameraOn: true,\n\t\t\tisRecording: true,\n\t\t\thasRecorded: false,\n\t\t});\n\t\tlet preview = document.getElementById('liveStream');\n\t\tpreview.srcObject = stream;\n\t\treturn new Promise((resolve) => (preview.onloadedmetadata = resolve));\n\t}\n\n\tstartRecording = () => {\n\t\tnavigator.mediaDevices\n\t\t\t.getUserMedia({ audio: true, video: true })\n\t\t\t.then((stream) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tstream,\n\t\t\t\t});\n\t\t\t\tthis.haveLoadedMetadata(stream).then(() => {\n\t\t\t\t\tvar options = {\n\t\t\t\t\t\taudioBitsPerSecond: 128000,\n\t\t\t\t\t\tvideoBitsPerSecond: 2500000,\n\t\t\t\t\t\tmimeType: 'video/webm',\n\t\t\t\t\t};\n\t\t\t\t\tvar rec = new MediaRecorder(stream, options);\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\trecordingObject: rec,\n\t\t\t\t\t\tvideoStream: stream,\n\t\t\t\t\t});\n\t\t\t\t\tthis.state.recordingObject.start();\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\tstopRecording = () => {\n\t\tthis.state.videoStream.getTracks().forEach((track) => track.stop());\n\n\t\tthis.state.recordingObject.onstop = (e) => {\n\t\t\tvar link = URL.createObjectURL(\n\t\t\t\tnew Blob(this.state.recordedChunks, { type: 'video/webm' })\n\t\t\t);\n\t\t\tthis.setState({\n\t\t\t\tblobURL: link,\n\t\t\t});\n\t\t\tconsole.log(this.state.blobURL);\n\n\t\t\tlet review = document.getElementById('recordedStream');\n\t\t\treview.src = link;\n\t\t};\n\n\t\tthis.state.recordingObject.ondataavailable = (e) => {\n\t\t\tconsole.log(e.data);\n\t\t\tvar chunks = [];\n\t\t\tchunks.push(e.data);\n\t\t\tthis.setState({\n\t\t\t\trecordedChunks: chunks,\n\t\t\t});\n\t\t};\n\n\t\tthis.setState({\n\t\t\thasRecorded: true,\n\t\t\tisRecording: false,\n\t\t\tisCameraOn: false,\n\t\t});\n\t};\n\n\t// sendToAPI = () => {\n\t// \taxios\n\t// \t\t.post(Url + 'employer/login/', JSON.stringify(loginData))\n\t// \t\t.then((response) => {\n\t// \t\t\tconsole.log('response', response);\n\t// \t\t\tif (response.data.response.token) {\n\t// \t\t\t\tlet expires = new Date(Date.now() + 25920000);\n\t// \t\t\t\tconst cookies = new Cookies();\n\t// \t\t\t\tconsole.log('response_token', response.data.response.token);\n\t// \t\t\t\tcookies.set('access_token', response.data.response.token, {\n\t// \t\t\t\t\tpath: '/',\n\t// \t\t\t\t\texpires,\n\t// \t\t\t\t});\n\t// \t\t\t}\n\t// \t\t\tthis.props.history.replace({\n\t// \t\t\t\tpathname: '/dashboard',\n\t// \t\t\t});\n\t// \t\t})\n\t// \t\t.catch(function (error) {\n\t// \t\t\tconsole.log(error);\n\t// \t\t});\n\t// };\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t{this.state.isCameraOn &&\n\t\t\t\t!this.state.isRecording &&\n\t\t\t\t!this.state.hasRecorded ? (\n\t\t\t\t\t<video id='previewStream' autoPlay muted></video>\n\t\t\t\t) : null}\n\t\t\t\t{this.state.isCameraOn &&\n\t\t\t\tthis.state.isRecording &&\n\t\t\t\t!this.state.hasRecorded ? (\n\t\t\t\t\t<video id='liveStream' autoPlay muted></video>\n\t\t\t\t) : null}\n\n\t\t\t\t{!this.state.isCameraOn &&\n\t\t\t\t!this.state.isRecording &&\n\t\t\t\tthis.state.hasRecorded ? (\n\t\t\t\t\t<video controls id='recordedStream' autoPlay></video>\n\t\t\t\t) : null}\n\n\t\t\t\t{!this.state.isCameraOn ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-warning'\n\t\t\t\t\t\tonClick={() => this.startCamera()}\n\t\t\t\t\t>\n\t\t\t\t\t\tStart Camera\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\n\t\t\t\t{!this.state.isRecording ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-success'\n\t\t\t\t\t\tonClick={() => this.startRecording()}\n\t\t\t\t\t>\n\t\t\t\t\t\tStart Recording\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{this.state.isRecording ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-danger'\n\t\t\t\t\t\tonClick={() => this.stopRecording()}\n\t\t\t\t\t>\n\t\t\t\t\t\tStop Recording\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{/* {this.state.hasRecorded ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\tonClick={() => this.sendToAPI()}\n\t\t\t\t\t>\n\t\t\t\t\t\tSend to API\n\t\t\t\t\t</button>\n\t\t\t\t) : null} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}