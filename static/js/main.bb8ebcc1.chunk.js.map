{"version":3,"sources":["VideoPlayer/index.js","App.js","serviceWorker.js","index.js"],"names":["VideoPlayer","url","id","playing","muted","controls","className","width","height","App","props","startCamera","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","audio","video","then","stream","setState","isCameraOn","previewStreamURL","startRecording","haveLoadedMetadata","rec","MediaRecorder","audioBitsPerSecond","videoBitsPerSecond","mimeType","recordingObject","videoStream","state","start","stopRecording","getTracks","forEach","track","console","log","stop","onstop","e","link","URL","createObjectURL","Blob","recordedChunks","type","blobURL","recordedStreamURL","ondataavailable","data","chunks","push","hasRecorded","isRecording","liveStreamURL","this","Promise","resolve","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb8ebcc1.chunk.js","sourcesContent":["import ReactPlayer from 'react-player';\r\n\r\nimport './style.css';\r\n\r\nimport React from 'react';\r\n\r\nconst VideoPlayer = ({ url, id, playing, muted , controls }) => {\r\n\t\treturn (\r\n\t\t\t<div className='player-wrapper'>\r\n\t\t\t\t<ReactPlayer\r\n\t\t\t\t\tclassName='react-player'\r\n\t\t\t\t\turl={ url }\r\n                    playing = { playing }\r\n                    id={ id }\r\n                    muted = { muted } \r\n                    controls = { controls }\r\n\t\t\t\t\twidth='70%'\r\n\t\t\t\t\theight='70%'\r\n\t\t\t\t\tcontrols\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default VideoPlayer;\r\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport VideoPlayer from './VideoPlayer';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisCameraOn: false,\n\t\t\tisRecording: false,\n\t\t\thasRecorded: false,\n\t\t\tblobURL: '',\n\t\t\trecordingObject: {},\n            recordedChunks: [],\n            previewStreamURL: 'https://www.youtube.com/watch?v=Rq5SEhs9lws',\n            liveStreamURL: 'https://www.youtube.com/watch?v=Rq5SEhs9lws',\n            recordedStreamURL: 'https://www.youtube.com/watch?v=Rq5SEhs9lws',\n\t\t};\n\t}\n\n\tstartCamera = () => {\n\t\tnavigator.mediaDevices.getUserMedia =\n\t\t\tnavigator.mediaDevices.getUserMedia ||\n\t\t\tnavigator.webkitGetUserMedia ||\n\t\t\tnavigator.mozGetUserMedia;\n\t\tnavigator.mediaDevices\n\t\t\t.getUserMedia({ audio: true, video: true })\n\t\t\t.then((stream) => {\n\t\t\t\tthis.setState({\n                    isCameraOn: true,\n                    previewStreamURL: stream\n\t\t\t\t});\n                // let preview = document.getElementById('previewStream');\n                // console.log('hi');\n                // console.log(preview);\n                // console.log(preview.children[0].firstChild);\n                // console.log(preview.children[0].children[0].src);\n\t\t\t});\n\t};\n\n\thaveLoadedMetadata(stream) {\n\t\tthis.setState({\n\t\t\tisCameraOn: true,\n\t\t\tisRecording: true,\n            hasRecorded: false,\n            liveStreamURL: stream\n\t\t});\n\t\t// let preview = document.getElementById('liveStream');\n\t\t// preview.srcObject = stream;\n\t\treturn new Promise((resolve) => (resolve()));\n\t\t// return new Promise((resolve) => (preview.onloadedmetadata = resolve));\n\t}\n\n\tstartRecording = () => {\n\t\tnavigator.mediaDevices.getUserMedia =\n\t\t\tnavigator.mediaDevices.getUserMedia ||\n\t\t\tnavigator.webkitGetUserMedia ||\n\t\t\tnavigator.mozGetUserMedia;\n\t\tnavigator.mediaDevices\n\t\t\t.getUserMedia({ audio: true, video: true })\n\t\t\t.then((stream) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tstream,\n\t\t\t\t});\n\t\t\t\tthis.haveLoadedMetadata(stream).then(() => {\n\t\t\t\t\tvar options = {\n\t\t\t\t\t\taudioBitsPerSecond: 128000,\n\t\t\t\t\t\tvideoBitsPerSecond: 2500000,\n\t\t\t\t\t\tmimeType: 'video/webm',\n\t\t\t\t\t};\n                    var rec = new MediaRecorder(stream, options);\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\trecordingObject: rec,\n\t\t\t\t\t\tvideoStream: stream,\n\t\t\t\t\t});\n\t\t\t\t\tthis.state.recordingObject.start();\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\tstopRecording = () => {\n        this.state.videoStream.getTracks().forEach((track) => console.log(track));\n        this.state.videoStream.getTracks().forEach((track) => track.stop());\n\n        this.state.recordingObject.stop();\n\n\t\tthis.state.recordingObject.onstop = (e) => {\n\t\t\tvar link = URL.createObjectURL(\n\t\t\t\tnew Blob(this.state.recordedChunks, { type: 'video/webm' })\n            );\n            console.log('Hi');\n            console.log(link);\n            console.log('hi1')\n\t\t\tthis.setState({\n                blobURL: link,\n                recordedStreamURL: link,\n\t\t\t});\n            console.log(this.state.blobURL);\n\n\t\t\t// let review = document.getElementById('recordedStream');\n\t\t\t// review.src = link;\n\t\t};\n\n\t\tthis.state.recordingObject.ondataavailable = (e) => {\n\t\t\tconsole.log(e.data);\n\t\t\tvar chunks = [];\n\t\t\tchunks.push(e.data);\n\t\t\tthis.setState({\n\t\t\t\trecordedChunks: chunks,\n\t\t\t});\n\t\t};\n\n\t\tthis.setState({\n\t\t\thasRecorded: true,\n\t\t\tisRecording: false,\n\t\t\tisCameraOn: false,\n\t\t});\n\t};\n\n\t// getDetails = () => {\n\t// \tlet review = document.getElementById('player');\n\t// \tconsole.log(review);\n\t// \tconsole.log(review.children);\n\t// \t// console.log(review.children[0].children[0].src);\n\t// };\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t{/* <VideoPlayer\n\t\t\t\t\tid='player'\n\t\t\t\t\tmuted={true}\n\t\t\t\t\tcontrols={false}\n\n\t\t\t\t\tplaying={true}\n\t\t\t\t\turl='https://www.youtube.com/watch?v=Rq5SEhs9lws'\n\t\t\t\t/> */}\n\t\t\t\t{/* <button onClick={() => this.getDetails()}>getDetails</button> */}\n\t\t\t\t{/* <video id='previewStream' autoPlay muted></video> */}\n\n\t\t\t\t{this.state.isCameraOn &&\n\t\t\t\t!this.state.isRecording &&\n\t\t\t\t!this.state.hasRecorded ? (\n\n\t\t\t\t<VideoPlayer\n\t\t\t\t\tid='previewStream'\n\t\t\t\t\tmuted={true}\n\t\t\t\t\tcontrols={false}\n\t\t\t\t\tplaying={true}\n\t\t\t\t\turl= {this.state.previewStreamURL}\n\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t\t{this.state.isCameraOn &&\n\t\t\t\tthis.state.isRecording &&\n\t\t\t\t!this.state.hasRecorded ? (\n\n\n\t\t\t\t<VideoPlayer\n\t\t\t\t\tid='liveStream'\n\t\t\t\t\tmuted={true}\n\t\t\t\t\tcontrols={false}\n\t\t\t\t\tplaying={true}\n\t\t\t\t\turl= {this.state.liveStreamURL}\n\t\t\t\t/>\n\t\t\t\t) : null}\n\n\t\t\t\t{!this.state.isCameraOn &&\n\t\t\t\t!this.state.isRecording &&\n\t\t\t\tthis.state.hasRecorded ? (\n\n\n<VideoPlayer\n    id='recorded'\n    muted={false}\n    controls={true}\n    playing={true}\n    url= {this.state.recordedStreamURL}\n/>\n\t\t\t\t) : null}\n\n\t\t\t\t{!this.state.isCameraOn ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-warning'\n\t\t\t\t\t\tonClick={() => this.startCamera()}\n\t\t\t\t\t>\n\t\t\t\t\t\tStart Camera\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\n\t\t\t\t{!this.state.isRecording ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-success'\n\t\t\t\t\t\tonClick={() => this.startRecording()}\n\t\t\t\t\t>\n\t\t\t\t\t\tStart Recording\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{this.state.isRecording ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-danger'\n\t\t\t\t\t\tonClick={() => this.stopRecording()}\n\t\t\t\t\t>\n\t\t\t\t\t\tStop Recording\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{/* {this.state.hasRecorded ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\tonClick={() => this.sendToAPI()}\n\t\t\t\t\t>\n\t\t\t\t\t\tSend to API\n\t\t\t\t\t</button>\n\t\t\t\t) : null} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}